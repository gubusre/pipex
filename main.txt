#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <stdio.h>
#include <sys/wait.h>
#include <string.h>

void	error_exit(const char *msg)
{
	perror(msg);
	exit(EXIT_FAILURE);
}

char	*find_path(char *cmd, char **envp)
{
	int		i;
	char	*path;
	char	*full_path;
	char	**paths;

	i = 0;
	while (envp[i] && strncmp(envp[i], "PATH=", 5) != 0)
		i++;
	if (!envp[i])
		return (cmd);
	paths = malloc(sizeof(char *) * 1024); // simplificado, puedes hacer split
	paths = ft_split(envp[i] + 5, ':');   // usa tu ft_split
	i = 0;
	while (paths[i])
	{
		path = malloc(strlen(paths[i]) + strlen(cmd) + 2);
		sprintf(path, "%s/%s", paths[i], cmd);
		if (access(path, X_OK) == 0)
			return (path);
		free(path);
		i++;
	}
	return (cmd);
}

void	exec_cmd(char *cmd, char **envp)
{
	char	**args;
	char	*path;

	args = ft_split(cmd, ' '); // tu implementaci√≥n de ft_split
	if (!args || !args[0])
		exit(EXIT_FAILURE);
	path = find_path(args[0], envp);
	if (execve(path, args, envp) == -1)
		error_exit("execve");
}

int	main(int argc, char **argv, char **envp)
{
	int		fd_in, fd_out, pipe_fd[2];
	pid_t	pid1, pid2;

	if (argc != 5)
	{
		fprintf(stderr, "Uso: %s file1 cmd1 cmd2 file2\n", argv[0]);
		return (1);
	}
	fd_in = open(argv[1], O_RDONLY);
	if (fd_in < 0)
		error_exit("open file1");
	fd_out = open(argv[4], O_CREAT | O_WRONLY | O_TRUNC, 0644);
	if (fd_out < 0)
		error_exit("open file2");
	if (pipe(pipe_fd) == -1)
		error_exit("pipe");
	pid1 = fork();
	if (pid1 == 0)
	{
		dup2(fd_in, STDIN_FILENO);
		dup2(pipe_fd[1], STDOUT_FILENO);
		close(pipe_fd[0]);
		exec_cmd(argv[2], envp);
	}
	pid2 = fork();
	if (pid2 == 0)
	{
		dup2(pipe_fd[0], STDIN_FILENO);
		dup2(fd_out, STDOUT_FILENO);
		close(pipe_fd[1]);
		exec_cmd(argv[3], envp);
	}
	close(pipe_fd[0]);
	close(pipe_fd[1]);
	waitpid(pid1, NULL, 0);
	waitpid(pid2, NULL, 0);
	return (0);
}
